package days01

 fun main(){
    // 함수를 만드는 문법
//    fun함수이름(매개변수) : 리턴값의 타입 {
//        코드들..
//
//    }
    // 함수는 메인함수 외부에도, 내부에도 생성이 가능하다.
    // 변수에 지역변수와 전역변수가 존재하듯, 함수도 그렇다는 뜻.

    test1();

     val a3:Int=200
    test2(50, 12.23);   // test2()함수 호출
     // 매개변수가 있는 함수를 호출할 때, 전달인수를 넣는 동작이 하나하나 끝날 때 마다 '매개변수명 : '을 인텔리제이가 전달인수 앞에 붙여준다.
     // 자동으로 입력되는 사항이니, 수동으로 입력ㄴㄴ

     test2(a3, 12.23);   // test2()함수 호출
     // 변수가 전달인수로 전달될 때는 앞에 매개변수명이 붙지 않는다.

     test2(a2=123.12, a1=300);
     // 다른 프로그래밍 언어와 마찬가지로, 전달인수의 순서는 매개변수의 기술된 순서에 맞춰 작성해야한다.
     // 다만 위와 같이 매개변수의 순서를 바꾸고자 한다면, '매개변수명='을 작성하여, 전달인수와 매개변수의 짝을 맞춰주면 가능하다.



     test3(100, 11.11);
     test3(200);
     // a2에 전달할 값이 생략되어


     val r1:Int = test4(100,200.12)
    println("r1 : $r1")
}
// 기본함수 (전달인수 없고 반환값이 없느 ㄴ함수)
fun test1(){
    println("test1함수 호출")
    println("-------------")

}

fun test2(a1:Int, a2:Double ){
    println("test2함수 호출")
    println("a1:$a1")
    println("a2:$a2")
    println("-------------")
}

// 매개변수에 기본값(디폴트)가 지정된 함수 : 해당 매개변수에 전달된ㄴ 값이 없으면, 기본값이 변수에 대입도니다.
fun test3(a1:Int = 0, a2:Double=0.0 ){
    println("test2함수 호출")
    println("a1:$a1")
    println("a2:$a2")
    println("-------------")
}

// 리턴(반환값)이 있는 함수
// fun 함수 이름(매개변수):리턴값의 자료형 { }
fun test4(a1:Int, a2:Double ) : Int {
    println("test4 호출")
    val result : Int = a1 + a2.toInt()
    return result
}
// 변수 또는 리터럴 .toInt() -> 변수 또는 자료형의 형변환(정수로 변환)


